# ~/.zshrc file for zsh interactive shells.
# see /usr/share/doc/zsh/examples/zshrc for examples

setopt autocd              # change directory just by typing its name
#setopt correct            # auto correct mistakes
setopt interactivecomments # allow comments in interactive mode
setopt magicequalsubst     # enable filename expansion for arguments of the form â€˜anything=expressionâ€™
setopt nonomatch           # hide error message if there is no match for the pattern
setopt notify              # report the status of background jobs immediately
setopt numericglobsort     # sort filenames numerically when it makes sense
setopt promptsubst         # enable command substitution in prompt

WORDCHARS=${WORDCHARS//\/} # Don't consider certain characters part of the word

# hide EOL sign ('%')
PROMPT_EOL_MARK=""

# configure key keybindings
bindkey -e                                        # emacs key bindings
bindkey ' ' magic-space                           # do history expansion on space
bindkey '^U' backward-kill-line                   # ctrl + U
bindkey '^[[3;5~' kill-word                       # ctrl + Supr
bindkey '^[[3~' delete-char                       # delete
bindkey '^[[1;5C' forward-word                    # ctrl + ->
bindkey '^[[1;5D' backward-word                   # ctrl + <-
bindkey '^[[5~' beginning-of-buffer-or-history    # page up
bindkey '^[[6~' end-of-buffer-or-history          # page down
bindkey '^[[H' beginning-of-line                  # home
bindkey '^[[F' end-of-line                        # end
bindkey '^[[Z' undo                               # shift + tab undo last action

# enable completion features
autoload -Uz compinit
compinit -d ~/.cache/zcompdump
zstyle ':completion:*:*:*:*:*' menu select
zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'
zstyle ':completion:*' rehash true
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'

# History configurations
HISTFILE=~/.zsh_history
HISTSIZE=1000
SAVEHIST=2000
setopt hist_expire_dups_first # delete duplicates first when HISTFILE size exceeds HISTSIZE
setopt hist_ignore_dups       # ignore duplicated commands history list
setopt hist_ignore_space      # ignore commands that start with space
setopt hist_verify            # show command with history expansion to user before running it
#setopt share_history         # share command history data

# force zsh to show the complete history
alias history="history 0"

# configure `time` format
TIMEFMT=$'\nreal\t%E\nuser\t%U\nsys\t%S\ncpu\t%P'

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

# COLORS AND SYMBOLS/EMOJIS
local prompt_symbol=ðŸ’»
local fadebar=${1:-'white'}
local userhost=${2:-'white'}
local userhost_bg=${3:-''}
local date=${4:-'white'}
local cwd=${5:-'yellow'}
local prompt_ips_color=${6:-'cyan'}
local address_color=${7:-'red'}

# Skull emoji for root terminal
if [ "$EUID" -eq 0 ]; then
    prompt_symbol=ðŸ’€
    fadebar=${1:-'red'}
    userhost=${2:-'red'}
    userhost_bg=${3:-''}
    date=${4:-'white'}
    cwd=${5:-'yellow'}
    prompt_ips_color=${6:-'cyan'}
    address_color=${7:-'white'}
fi

# The following block is surrounded by two delimiters.
# These delimiters must not be modified. Thanks.
# START KALI CONFIG VARIABLES
PROMPT_ALTERNATIVE=oneline
NEWLINE_BEFORE_PROMPT=no
# STOP KALI CONFIG VARIABLES

## My functions to get IPs
# Function to get the IP address of an interface
# Function to get the IP addresses of all ethX and wlanX interfaces
declare -A addresses

fill_addresses(){
    local ipc
    ipc=$(curl -s -m 2 ifconfig.me)
    if [ -n "$ipc" ]; then
        addresses[global]=$ipc
    else
        global_ip=""
    fi

    local interface=""
    local ips=""
    for interface in $(ip -o -4 addr show | awk '/(eth|wlan|tun)[0-9]+/ {print $2}' | cut -d':' -f1); do
        local ipo=""
        ipo=$(ip -o -4 addr show "$interface" 2>/dev/null | awk '{print $4}' | cut -d'/' -f1)
        #echo "$ipo"
        if [ -n "$ipo" ]; then
            addresses[$interface]=$ipo
        fi
    done
}
get_ips() {
    keys=("${(@k)addresses}")

    # Iterate through the keys and values
    for key in "${keys[@]}"; do
        if [[ "$key" = "global" ]];
        then
            value="${addresses[$key]}"
            global_ip=$'%B%F{'$fadebar$'}[%B%F{'$prompt_ips_color$'}'"global $value"$'%B%F{'$fadebar$'}]%k'
        else
            value="${addresses[$key]}"
            ips="$ips"$'%B%F{'$fadebar$'}[%B%F{'$prompt_ips_color$'}'"$key $value"$'%B%F{'$fadebar$'}]%k'
        fi
    done
    echo $'%k%B%F{'$address_color$'}'addresses: $global_ip$ips $'%k'
}

configure_prompt() {
    fill_addresses
    local ips=$(get_ips)
    local prompt_ips="${ips}"

    [ "$EUID" -eq 0 ] && local fadebar=${1:-'red'}
    local prompt_newline="
"
    local -A schars
    autoload -Uz prompt_special_chars
    prompt_special_chars

    case "$PROMPT_ALTERNATIVE" in
        twoline)
            #PROMPT=$'%F{%(#.blue.blue)}â”Œâ”€â”€${debian_chroot:+($debian_chroot)â”€}${VIRTUAL_ENV:+($(basename $VIRTUAL_ENV))â”€}(%B%F{}%n'$prompt_symbol$'%m%b%F{%(#.blue.blue)})-[%B%F{reset}%(6~.%-1~/â€¦/%4~.%5~)%b%F{%(#.blue.blue)}]\nâ””â”€%B%(#.%F{red}#.%F{blue}$)%b%F{reset} '
            PROMPT=$'%B%F{'$fadebar'}'$schars[333]$schars[262]$schars[261]$schars[260]$'%B%F{'$userhost$'}%K{'$userhost_bg$'}%n'$prompt_symbol$'%m%b%k%f%F{'$fadebar$'}%k'$schars[260]$schars[261]$schars[262]$schars[333]$'%b%f%k%F{'$fadebar$'}%k'$schars[333]$schars[262]$schars[261]$schars[260]$'%B%F{'$date$'}%k %D{%a %b %d} %D{%I:%M:%S%P}'$prompt_newline$'%B%F{'$cwd$'}%k%d>%b%f%k '
            # Right-side prompt with exit codes and background processes
            RPROMPT=$'%(?.. %? %F{red}%Bâ¨¯%b%F{reset})%(1j. %j %F{yellow}%Bâš™%b%F{reset}.) '"%B%F{$fadebar}$schars[333]$schars[262]$schars[261]$schars[260]%b%F{$fadebar}%k $prompt_ips $schars[260]$schars[261]$schars[262]$schars[333]%F{$fadebar}%k$schars[333]$schars[262]$schars[261]$schars[260]%B%F{$fadebar}>%b%f%k "
            #RPROMPT=$prompt_ips$'%(?.. %? %F{red}%Bâ¨¯%b%F{reset})%(1j. %j %F{yellow}%Bâš™%b%F{reset}.)'
            ;;
        oneline)
            #PROMPT=$'${debian_chroot:+($debian_chroot)}${VIRTUAL_ENV:+($(basename $VIRTUAL_ENV))}%B%F{%(#)}%n@%m%b%F{reset}:%B%F{%(#.blue.blue)}%~%b%F{reset}%(#.#.$) '
            PROMPT=$'%B%F{'$fadebar'}'$schars[333]$schars[262]$schars[261]$schars[260]$'%B%F{'$userhost$'}%K{'$userhost_bg$'}%n'$prompt_symbol$'%m%B%k%f%F{'$fadebar$'}%k'$schars[260]$schars[261]$schars[262]$schars[333]$'%B%f%k%F{'$fadebar$'}%k'$schars[333]$schars[262]$schars[261]$schars[260]$'%B%F{'$date$'}%k %D{%a %b %d} %D{%I:%M:%S%P}'$'%(?.. %? %F{red}%Bâ¨¯%b%F{reset})%(1j. %j %F{yellow}%Bâš™%b%F{reset}.)'$prompt_newline$'%b%f%k%F{'$fadebar$'}%k'$prompt_ips''$prompt_newline$'%B%F{'$cwd$'}%k%d>%b%f%k '
            RPROMPT=
            ;;
        backtrack)
            PROMPT=$'${debian_chroot:+($debian_chroot)}${VIRTUAL_ENV:+($(basename $VIRTUAL_ENV))}%B%F{red}%n@%m%b%F{reset}:%B%F{blue}%~%b%F{reset}%(#.#.$) '
            RPROMPT=
            ;;
    esac
    unset prompt_symbol
}

# !DEPRECATED FUNCTION STALLS MY TERMINAL
# choose_prompt_layout(){
#     local width=$(tput cols)
#     if [[ $width -lt 160 ]]; then
#         PROMPT_ALTERNATIVE=oneline
#     else
#         PROMPT_ALTERNATIVE=twoline
#     fi
#     configure_prompt
# }

if [ "$color_prompt" = yes ]; then
    # override default virtualenv indicator in prompt
    VIRTUAL_ENV_DISABLE_PROMPT=1

    configure_prompt

    # enable syntax-highlighting
    if [ -f /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ] && [ "$color_prompt" = yes ]; then
        . /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
        ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern)
        ZSH_HIGHLIGHT_STYLES[default]=none
        ZSH_HIGHLIGHT_STYLES[unknown-token]=fg=red,bold
        ZSH_HIGHLIGHT_STYLES[reserved-word]=fg=cyan,bold
        ZSH_HIGHLIGHT_STYLES[suffix-alias]=fg=green,underline
        ZSH_HIGHLIGHT_STYLES[global-alias]=fg=magenta
        ZSH_HIGHLIGHT_STYLES[precommand]=fg=green,underline
        ZSH_HIGHLIGHT_STYLES[commandseparator]=fg=blue,bold
        ZSH_HIGHLIGHT_STYLES[autodirectory]=fg=green,underline
        ZSH_HIGHLIGHT_STYLES[path]=underline
        ZSH_HIGHLIGHT_STYLES[path_pathseparator]=
        ZSH_HIGHLIGHT_STYLES[path_prefix_pathseparator]=
        ZSH_HIGHLIGHT_STYLES[globbing]=fg=blue,bold
        ZSH_HIGHLIGHT_STYLES[history-expansion]=fg=blue,bold
        ZSH_HIGHLIGHT_STYLES[command-substitution]=none
        ZSH_HIGHLIGHT_STYLES[command-substitution-delimiter]=fg=magenta
        ZSH_HIGHLIGHT_STYLES[process-substitution]=none
        ZSH_HIGHLIGHT_STYLES[process-substitution-delimiter]=fg=magenta
        ZSH_HIGHLIGHT_STYLES[single-hyphen-option]=fg=magenta
        ZSH_HIGHLIGHT_STYLES[double-hyphen-option]=fg=magenta
        ZSH_HIGHLIGHT_STYLES[back-quoted-argument]=none
        ZSH_HIGHLIGHT_STYLES[back-quoted-argument-delimiter]=fg=blue,bold
        ZSH_HIGHLIGHT_STYLES[single-quoted-argument]=fg=yellow
        ZSH_HIGHLIGHT_STYLES[double-quoted-argument]=fg=yellow
        ZSH_HIGHLIGHT_STYLES[dollar-quoted-argument]=fg=yellow
        ZSH_HIGHLIGHT_STYLES[rc-quote]=fg=magenta
        ZSH_HIGHLIGHT_STYLES[dollar-double-quoted-argument]=fg=magenta
        ZSH_HIGHLIGHT_STYLES[back-double-quoted-argument]=fg=magenta
        ZSH_HIGHLIGHT_STYLES[back-dollar-quoted-argument]=fg=magenta
        ZSH_HIGHLIGHT_STYLES[assign]=none
        ZSH_HIGHLIGHT_STYLES[redirection]=fg=blue,bold
        ZSH_HIGHLIGHT_STYLES[comment]=fg=black,bold
        ZSH_HIGHLIGHT_STYLES[named-fd]=none
        ZSH_HIGHLIGHT_STYLES[numeric-fd]=none
        ZSH_HIGHLIGHT_STYLES[arg0]=fg=green
        ZSH_HIGHLIGHT_STYLES[bracket-error]=fg=red,bold
        ZSH_HIGHLIGHT_STYLES[bracket-level-1]=fg=blue,bold
        ZSH_HIGHLIGHT_STYLES[bracket-level-2]=fg=green,bold
        ZSH_HIGHLIGHT_STYLES[bracket-level-3]=fg=magenta,bold
        ZSH_HIGHLIGHT_STYLES[bracket-level-4]=fg=yellow,bold
        ZSH_HIGHLIGHT_STYLES[bracket-level-5]=fg=cyan,bold
        ZSH_HIGHLIGHT_STYLES[cursor-matchingbracket]=standout
    fi
else
    PROMPT='${debian_chroot:+($debian_chroot)}%n@%m:%~%# '
fi
unset color_prompt force_color_prompt

toggle_oneline_prompt(){
    if [ "$PROMPT_ALTERNATIVE" = oneline ]; then
        PROMPT_ALTERNATIVE=twoline
    else
        PROMPT_ALTERNATIVE=oneline
    fi
    configure_prompt
    zle reset-prompt
}
zle -N toggle_oneline_prompt
bindkey ^P toggle_oneline_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*|Eterm|aterm|kterm|gnome*|alacritty)
    TERM_TITLE=$'\e]0;${debian_chroot:+($debian_chroot)}${VIRTUAL_ENV:+($(basename $VIRTUAL_ENV))}%n@%m: %~\a'
    ;;
*)
    ;;
esac

precmd() {
    # Print the previously configured title
    print -Pnr -- "$TERM_TITLE"

    # Print a new line before the prompt, but only if it is not the first line
    if [ "$NEWLINE_BEFORE_PROMPT" = yes ]; then
        if [ -z "$_NEW_LINE_BEFORE_PROMPT" ]; then
            _NEW_LINE_BEFORE_PROMPT=1
        else
            print ""
        fi
    fi

    # !choose_prompt_layout
}

# enable color support of ls, less and man, and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    export LS_COLORS="$LS_COLORS:ow=30;44:" # fix ls color for folders with 777 permissions

    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
    alias diff='diff --color=auto'
    alias ip='ip --color=auto'

    export LESS_TERMCAP_mb=$'\E[1;31m'     # begin blink
    export LESS_TERMCAP_md=$'\E[1;36m'     # begin bold
    export LESS_TERMCAP_me=$'\E[0m'        # reset bold/blink
    export LESS_TERMCAP_so=$'\E[01;33m'    # begin reverse video
    export LESS_TERMCAP_se=$'\E[0m'        # reset reverse video
    export LESS_TERMCAP_us=$'\E[1;32m'     # begin underline
    export LESS_TERMCAP_ue=$'\E[0m'        # reset underline

    # Take advantage of $LS_COLORS for completion as well
    zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
    zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
fi

# some more ls aliases
alias ll='ls -l'
alias la='ls -A'
alias l='ls -CF'

# enable auto-suggestions based on the history
if [ -f /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh ]; then
    . /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh
    # change suggestion color
    ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=#999'
fi

# enable command-not-found if installed
if [ -f /etc/zsh_command_not_found ]; then
    . /etc/zsh_command_not_found
fi

# custom aliases
# Make beep count like beep 100 and it will beep 100 times
# --------------------------------------------------------- #

### HACKING START
# Define the path to the hidden file for storing hacking directories
HACKING_DIRS_FILE="$HOME/.hacking_dirs"
# Initialize the HACKING_DIRS array with the contents of the file, if it exists
declare -a HACKING_DIRS
if [[ -f $HACKING_DIRS_FILE ]]; then
    HACKING_DIRS=($(cat "$HACKING_DIRS_FILE"))
else
    echo "File $HACKING_DIRS_FILE doesn't exist. Creating it."
    touch "$HACKING_DIRS_FILE"
fi
# Function to validate and clean up the HACKING_DIRS array
clean_hacking_dirs() {
    local hacking_dir=()
    while IFS= read -r line; do
        hacking_dir+=("$line")
    done < "$HACKING_DIRS_FILE"

    local valid_dirs=()
    for dir_path in "${hacking_dir[@]}"
    do
        if [ -d "$dir_path" ] || [ -f "$dir_path" ]; then
            valid_dirs+=($dir_path)
        fi
    done

    setopt nullglob
    for dir_path in ~/.hacking/*/;
    do
        if [[ ! "${valid_dirs[*]}" =~ "${dir_path}" ]]; then
            valid_dirs+=($dir_path)
        fi
    done
    unsetopt nullglob
    
    HACKING_DIRS=()
    HACKING_DIRS=("${valid_dirs[@]}")
    echo ${(j:\n:)HACKING_DIRS} > "$HACKING_DIRS_FILE"
}
dir_function() {
    local _hacking_dir_name
    local _hacking_folders=()

    # Parse options with getopts
    while getopts "n:" opt; do
        case $opt in
            n)
                _hacking_dir_name=$OPTARG
                ;;
            *)
                echo "[?] Usage: hacking dir [-n name *optional] [directory1 directory2 ...]"
                return 1
                ;;
        esac
    done

    # Shift the parsed options
    shift $((OPTIND-1))

    # If name is empty, then join the directories or use the only directory as the name
    if [[ -z $_hacking_dir_name ]]; then
        if (( $# > 0 )); then
            _hacking_dir_name="${(@j:_:)@}"
        else
            echo "[?] Usage: hacking dir [-n name *optional] [directory1 directory2 ...]"
            return 1
        fi
    fi

    # Create a directory in /tmp by prepending "hacking_" to the name
    local hacking_dir=~/.hacking/$_hacking_dir_name

    # Check if the folder in /tmp already exists
    if [[ -e $hacking_dir ]]; then
        echo "[!] $hacking_dir exists. Use another name."
        return
    fi

    # Create the directory
    mkdir -p "$hacking_dir"

    # Copy all folders/files into the tmp directory created
    for dir_path in "$@"; do
        if [[ -e $dir_path ]]; then
            if [[ -d $dir_path ]]; then
                cp -r "$dir_path" "$hacking_dir"
                #echo "COPY FOLDER $dir_path to $hacking_dir"
            else
                cp "$dir_path" "$hacking_dir"
                #echo "COPY FILE $dir_path to $hacking_dir"
            fi
        else
            echo "[?] Warning: '$dir_path' does not exist and will not be copied."
        fi
    done

    # Update the HACKING_DIRS array and file
    clean_hacking_dirs
    echo "[*] Hacking in $hacking_dir"
    cd "$hacking_dir"
    
    # Make script folder and start script
    mkdir "$hacking_dir/.script_log"
    script --timing="$hacking_dir/.script_log/timming_log" "$hacking_dir/.script_log/script"
}
change_function() {
    #clean_hacking_dirs
    if (( ${#HACKING_DIRS[@]} == 0 )); then
        echo "[!] No available hacking directories."
    else
        local hacking_dir_index=$1
        if (( hacking_dir_index >= 1 && hacking_dir_index <= ${#HACKING_DIRS[@]} )); then
            echo "[*] Changed to ${HACKING_DIRS[hacking_dir_index]}"
            cd ${HACKING_DIRS[hacking_dir_index]}
            script --timing="${HACKING_DIRS[hacking_dir_index]}/.script_log/timming_log" -a "${HACKING_DIRS[hacking_dir_index]}/.script_log/script"
        else
            if (( ${#HACKING_DIRS[@]} == 1 )); then
                echo "[?] Use 1"
            else
                echo "[?] Minimum number can be 1, maximum number can be $(( ${#HACKING_DIRS[@]} ))"
            fi
        fi
    fi
}
list_function() {
    clean_hacking_dirs
    if (( ${#HACKING_DIRS[@]} == 0 )); then
        echo "[!] No available hacking directories."
    else
        echo "[?] Available hacking directories:"
        for ((i=1; i <= $#HACKING_DIRS; i++)); do
            echo "[$i] $HACKING_DIRS[$i]"
        done
    fi
}
rm_function(){
    clean_hacking_dirs
    local hacking_dir_index=$1
    local removed_dir=${HACKING_DIRS[hacking_dir_index]}
    if (( ${#HACKING_DIRS[@]} == 0 )); then
        echo "[!] No available hacking directories."
    else
        rm -drf ${HACKING_DIRS[hacking_dir_index]}
        echo "[?] Removed $removed_dir"
    fi
}
hack() {
    case $1 in
        "dir")
            shift
            if [ ! -z $1 ]; then
                dir_function "$@"
            else
                echo "[?] Usage: hack dir -n name dir1 *"
            fi
            ;;
        "cd")
            shift
            if [ ! -z $1 ]; then
                change_function "$@"
            else
                echo "[?] Usage: hack cd N"
            fi
            ;;
        "ls")
            list_function
            ;;
        "rm")
            shift
            if [ ! -z $1 ]; then
                rm_function "$@"
            else
                echo "[?] Usage: hack rm N"
            fi
            ;;
        *)
            echo "[?] Usage: hack [dir|cd|ls|rm] [options]"
            ;;
    esac
}
### HACKING STOP

## MY ALIASES AND FUNCTIONS

# cdh() {
#     local history
#     history=$(dirs -l -p | awk '!seen[$0]++' | tac)
#     if [ -z "$history" ]; then
#         echo "Directory history is empty."
#     else
#         echo "Directory history:"
#         echo "$history" | nl -v 0
#         if [ -n "$1" ]; then
#             local index
#             index=$(( $1 + 1 )) # Adjust index to account for nl numbering
#             if [ $index -lt 0 ] || [ $index -ge $(echo "$history" | wc -l) ]; then
#                 echo "Invalid index."
#             else
#                 cd "$(echo "$history" | sed -n "${index}p")"
#             fi
#         fi
#     fi
# }

mvundo(){
    # Undo the mv you just did
}

refresh_ip(){
    # Clear addresses associative array
    for key in ${(k)addresses}; do
        unset "addresses[$key]"
    done

    # configure_prompt
}

alert() {          
    notify-send -u low --icon=/usr/share/icons/Flat-Remix-Blue-Dark/status/scalable/512/gtk-dialog-info.svg "ALERT" "$1" && paplay /usr/share/sounds/freedesktop/stereo/complete.oga
}
alias beep="paplay /usr/share/sounds/freedesktop/stereo/complete.oga"
alias tools="cd $HOME/Tools"
alias clip="xclip -selection clipboard -rmlastnl"

# Added custom paths of binaries
GOPATH=$HOME/.go
YARNPATH=$HOME/.yarn
PATH=$PATH:~/.local/bin:$GOPATH/bin:$YARNPATH/bin
